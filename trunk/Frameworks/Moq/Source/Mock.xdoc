<?xml version="1.0" encoding="utf-8" ?>
<docs xml:space="preserve">
	<doc for="Mock">
		<summary>
			Base class for mocks and static helper class with methods that
			apply to mocked objects, such as <see cref="Get"/> to
			retrieve a <see cref="Mock{T}"/> from an object instance.
		</summary>
	</doc>
	<doc for="Mock.ctor">
		<summary>
			Initializes a new instance of the <see cref="Mock"/> class.
		</summary>
	</doc>
	<doc for="Mock.Get">
		<summary>
			Retrieves the mock object for the given object instance.
		</summary>
		<typeparam name="T">
			Type of the mock to retrieve. Can be omitted as it's inferred
			from the object instance passed in as the <paramref name="mocked"/> instance.
		</typeparam>
		<param name="mocked">The instance of the mocked object.</param>
		<returns>The mock associated with the mocked object.</returns>
		<exception cref="ArgumentException">
			The received <paramref name="mocked"/> instance
			was not created by Moq.
		</exception>
		<example group="advanced">
			The following example shows how to add a new setup to an object
			instance which is not the original <see cref="Mock{T}"/> but rather
			the object associated with it:
			<code>
				// Typed instance, not the mock, is retrieved from some test API.
				HttpContextBase context = GetMockContext();

				// context.Request is the typed object from the "real" API
				// so in order to add a setup to it, we need to get
				// the mock that "owns" it
				Mock&lt;HttpRequestBase&gt; request = Mock.Get(context.Request);
				mock.Setup(req => req.AppRelativeCurrentExecutionFilePath)
					 .Returns(tempUrl);
			</code>
		</example>		
	</doc>
	<doc for="Mock.Behavior">
		<summary>
			Behavior of the mock, according to the value set in the constructor.
		</summary>
	</doc>
	<doc for="Mock.CallBase">
		<summary>
			Whether the base member virtual implementation will be called
			for mocked classes if no setup is matched. Defaults to <see langword="false"/>.
		</summary>
	</doc>
	<doc for="Mock.DefaultValue">
		<summary>
			Specifies the behavior to use when returning default values for
			unexpected invocations on loose mocks.
		</summary>		
	</doc>
	<doc for="Mock.Object">
		<summary>
			Gets the mocked object instance, which is of the mocked type <typeparamref name="T"/>.
		</summary>
	</doc>
	<doc for="Mock.GetObject">
		<summary>
			Returns the mocked object value.
		</summary>
	</doc>
	<doc for="Mock.Verify">
		<summary>
			Verifies that all verifiable expectations have been met.
		</summary>
		<example group="verification">
			This example sets up an expectation and marks it as verifiable. After
			the mock is used, a <c>Verify()</c> call is issued on the mock
			to ensure the method in the setup was invoked:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				this.Setup(x =&gt; x.HasInventory(TALISKER, 50)).Verifiable().Returns(true);
				...
				// other test code
				...
				// Will throw if the test code has didn't call HasInventory.
				this.Verify();
			</code>
		</example>
		<exception cref="MockException">Not all verifiable expectations were met.</exception>
	</doc>
	<doc for="Mock.VerifyAll">
		<summary>
			Verifies all expectations regardless of whether they have
			been flagged as verifiable.
		</summary>
		<example group="verification">
			This example sets up an expectation without marking it as verifiable. After
			the mock is used, a <see cref="VerifyAll"/> call is issued on the mock
			to ensure that all expectations are met:
			<code>
				var mock = new Mock&lt;IWarehouse&gt;();
				this.Setup(x =&gt; x.HasInventory(TALISKER, 50)).Returns(true);
				...
				// other test code
				...
				// Will throw if the test code has didn't call HasInventory, even
				// that expectation was not marked as verifiable.
				this.VerifyAll();
			</code>
		</example>
		<exception cref="MockException">At least one expectation was not met.</exception>
	</doc>
	<doc for="Mock.CreateEventHandler{TEventArgs}">
		<summary>
			Creates a handler that can be associated to an event receiving
			the given <typeparamref name="TEventArgs"/> and can be used
			to raise the event.
		</summary>
		<typeparam name="TEventArgs">
			Type of <see cref="EventArgs"/>
			data passed in to the event.
		</typeparam>
		<example>
			This example shows how to invoke an event with a custom event arguments
			class in a view that will cause its corresponding presenter to
			react by changing its state:
			<code>
				var mockView = new Mock&lt;IOrdersView&gt;();
				var mockedEvent = mockView.CreateEventHandler&lt;OrderEventArgs&gt;();

				var presenter = new OrdersPresenter(mockView.Object);

				// Check that the presenter has no selection by default
				Assert.Null(presenter.SelectedOrder);

				// Create a mock event handler of the appropriate type
				var handler = mockView.CreateEventHandler&lt;OrderEventArgs&gt;();
				// Associate it with the event we want to raise
				mockView.Object.Cancel += handler;
				// Finally raise the event with a specific arguments data
				handler.Raise(new OrderEventArgs { Order = new Order("moq", 500) });

				// Now the presenter reacted to the event, and we have a selected order
				Assert.NotNull(presenter.SelectedOrder);
				Assert.Equal("moq", presenter.SelectedOrder.ProductName);
			</code>
		</example>
	</doc>
	<doc for="Mock.CreateEventHandler">
		<summary>
			Creates a handler that can be associated to an event receiving
			a generic <see cref="EventArgs"/> and can be used
			to raise the event.
		</summary>
		<example>
			This example shows how to invoke a generic event in a view that will
			cause its corresponding presenter to react by changing its state:
			<code>
				var mockView = new Mock&lt;IOrdersView&gt;();
				var mockedEvent = mockView.CreateEventHandler();

				var presenter = new OrdersPresenter(mockView.Object);

				// Check that the presenter is not in the "Canceled" state
				Assert.False(presenter.IsCanceled);

				// Create a mock event handler of the appropriate type
				var handler = mockView.CreateEventHandler();
				// Associate it with the event we want to raise
				mockView.Object.Cancel += handler;
				// Finally raise the event
				handler.Raise(EventArgs.Empty);

				// Now the presenter reacted to the event, and changed its state
				Assert.True(presenter.IsCanceled);
			</code>
		</example>
	</doc>
</docs>